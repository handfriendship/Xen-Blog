import Vue from 'vue'
import App from './App'
import router from './router'
import store from '@/store'
import * as firebase from 'firebase/app';
import 'firebase/auth';
import 'firebase/firestore';
import algoliasearch from 'algoliasearch';
// import 'firebase/firebase-functions';
//
// const functions = require('firebase-functions');
// const admin = require('firebase-admin');
// admin.initializeApp();

// const ALGOLIA_ID = functions.config().algolia.app_id;
// const ALGOLIA_ADMIN_KEY = functions.config().algolia.api_key;
// const ALGOLIA_SEARCH_KEY = functions.config().algolia.search_key;
const ALGOLIA_ID = 'FXI56PZ34B';
const ALGOLIA_ADMIN_KEY = 'f6b11c83900ac58b808bf4c916a8049f';
const ALGOLIA_SEARCH_KEY = 'de10c0a2ea998b213869b689c75f9997';
const client = algoliasearch(ALGOLIA_ID, ALGOLIA_ADMIN_KEY);
var index = client.initIndex('post_SUNNY');

// exports.onNoteCreated = functions.firestore.document('test').onCreate((snap, context) => {
//   // Get the note document
//   const note = snap.data();
//
//   // Add an 'objectID' field which Algolia requires
//   note.objectID = context.params.noteId;
//
//   // Write to the algolia index
//   const index = client.initIndex(post_SUNNY);
//   return index.saveObject(note);
// });
export default {
  searchIndex({keyword, picked}) {
      console.log("myFunction in Algolia called!");
      console.log("keyword : ", keyword);
      console.log("picked : ", picked);

      // switch(picked){
      //   case "title, content" :
      //     var attributes = ['title', 'content'];
      //     break;
      //   case "title" :
      //     var attributes = ['title'];
      //     break;
      //   case "content" :
      //     var attributes = ['content'];
      //     break;
      //   case "author" :
      //     var attributes = ['author'];
      //     break;
      //   default :
      //     var attributes = [];
      // }

      return new Promise(function(resolve, reject) {
        index.setSettings({ // 이건 내 algolia indice 의 setting 을 permanently 하게 바꾸는 거
          // searchableAttributes: attributes
          searchableAttributes: []
        }).then(() => {
          index.search(keyword, {
            attributesToRetrieve: ['*'],
          })
            .then(function(responses) {
              console.log("responses : ", responses);
            // https://www.algolia.com/doc/api-reference/api-methods/search/#response-format
              console.log(responses.hits);
              resolve(responses.hits);
            })
            .catch(function(error){
              console.log("Algolia - error occured!");
              reject(error);
            })
        })
      })
  },

  addIndex(objects) {
    console.log("Algolia - addIndex called!");
    index.saveObjects(objects, { autoGenerateObjectIDIfNotExist: true })
      .then(({objectIDs}) => {
        console.log("autoGenerated objectIDs : ", objectIDs);
      })
      .catch(function(error){
        console.log("Algolia - error occured!");
      })
  },

  addSingleIndexWithId(object){
    var objectWithId = {...object, objectID: object.postID};
    console.log("Algolia - addSingleIndexWithId - object : ", object);
    return new Promise(function(resolve, reject) {
      index.saveObject(objectWithId)
        .then(({ objectID }) => {
          console.log(objectID);
          resolve(objectID);
        }).catch(function(error){
          console.log("Algolia - error occured!");
          reject(error);
          alert("무료 플랜에서는 사진 혹은 문서가 들어간 파일에 색인 기능을 지원하지 않습니다.");
        })
    })
  },
  editIndexById(object) {
    var tempObj = {...object};
    tempObj['objectID'] = object.postID;
    delete tempObj.postID;
    return new Promise(function(resolve, reject){
      index.partialUpdateObject(tempObj)
        .then(({objectIDs}) => {
          resolve(objectIDs);
        }).catch((error) => {
          reject(error);
        })
    })
  },
  deleteIndexById(objectID){
    return new Promise(function(resolve, reject){
      index.deleteObject(objectID)
        .then(({objectIDs}) => {
          resolve(objectIDs);
        }).catch((error) => {
          reject(error);
        })
    })
  }
}
